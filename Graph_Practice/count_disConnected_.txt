class Solution {
public:
    void bfs(int src, unordered_map<int, bool>& visited,unordered_map<int, vector<int>> &adjList) {
        queue<int> q;

        q.push(src);
        visited[src] = true;

        while (!q.empty()) {
            int frontNode = q.front();
            q.pop();
            cout << frontNode << ", ";

            // inserting nbrs
            for (auto nbr : adjList[frontNode]) {
                if (!visited[nbr]) {
                    q.push(nbr);
                    visited[nbr] = true;
                }
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        // make adjList;
        unordered_map<int, vector<int>> adjList;
        int n = isConnected.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (isConnected[i][j] == 1 && i != j)
                    adjList[i + 1].push_back(j + 1);
            }
        }

        unordered_map<int, bool> visited;
        // cout << "Printing BFS\n";

        int COUNT=0;
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                bfs(i, visited,adjList);
                COUNT++;
            }
        }

        return COUNT;
    }
};