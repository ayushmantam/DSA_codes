#include <vector>
#include <algorithm>

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if (intervals.empty()) {
            return {};
        }

        // Sort the intervals based on their start times
        sort(intervals.begin(), intervals.end());

        vector<vector<int>> answer;
        int prevStart = intervals[0][0];
        int prevEnd = intervals[0][1];

        for (int i = 1; i < intervals.size(); i++) {
            int currStart = intervals[i][0];
            int currEnd = intervals[i][1];

            // If the current interval overlaps with the previous one, merge them
            if (currStart <= prevEnd) {
                prevEnd = max(prevEnd, currEnd);
            } else {
                // If there is no overlap, add the previous interval to the answer
                answer.push_back({prevStart, prevEnd});
                prevStart = currStart;
                prevEnd = currEnd;
            }
        }

        // Add the last interval to the answer
        answer.push_back({prevStart, prevEnd});

        return answer;
    }
};
