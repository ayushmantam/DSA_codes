class Solution {
public:
    int SolveUsingRecursion(vector<int>coins,int amount){
        if(amount==0){
            return 0;
        }
        if(amount<0){
            return INT_MAX;
        }
        int mini=INT_MAX;
        for(int i=0;i<coins.size();i++){
            int ans=SolveUsingRecursion(coins,amount-coins[i]);
            if(ans!=INT_MAX){
                mini=min(mini,ans+1);
            }
        }
        return mini;
    }
    int solveMem(int amount,vector<int>coins,vector<int>&dp){
        if(amount==0){
            return 0;
        }
        if(amount<0){
            return INT_MAX;
        }
        // step3
        if(dp[amount]!=-1){
            return dp[amount];
        }
        int mini=INT_MAX;
        for(int i=0;i<coins.size();i++){
            int ans=solveMem(amount-coins[i],coins,dp);
            if(ans!=INT_MAX){
                mini=min(mini,ans+1);
            }
        }
        dp[amount]=mini;
        return dp[amount]; 
    }

    int SolveTab(vector<int>&coins,int amount){
        // step1: create a dp array
        vector<int>dp(amount+1,INT_MAX);
        
        // step2: base case dekho
        dp[0]=0;
        //step3: check the range and flow of top down approach and code accordingly 
        for(int target=1; target <=amount ; target++){
            int mini=INT_MAX;
            for(int i=0 ; i <coins.size(); i++){
                if(target-coins[i] >= 0){
                    int ans=dp[target-coins[i]];
                
                if(ans !=INT_MAX){
                    mini=min(mini,1+ans);
                } 
                }    
            }
             dp[target]=mini;
            
        }
        return dp[amount];
    }

    //NO SPACE OPTIMIZATION possible HERE
    int coinChange(vector<int>& coins, int amount) {
        /*  by Recursion
        int ans= SolveUsingRecursion(coins,amount);
        if(ans==INT_MAX){  //agar banana possible hi na ho
            return -1;
        }
        else
        return ans;
        */

        // vector<int>dp(amount+1,-1);
        // int ans=solveMem(amount,coins,dp);
        // if(ans==INT_MAX){ 
        //     return -1;
        // }
        // else
        // return ans;

        int ans=SolveTab(coins,amount);
        if(ans==INT_MAX){ 
            return -1;
        }
        else
        return ans;

    }
};