class Solution {
public:
    int helper(vector<int>& nums, int target){
        if(target==0){
            return 1;
        }
        if(target<0){
            return 0;
        }
        
        int ans=0;
        for(int i=0; i < nums.size() ; i++){
            ans+=helper(nums,target-nums[i]);
        }
        return ans;
    }
    int helperMem(vector<int>& nums, int target,vector<int>&dp){
        if(target==0){
            return 1;
        }
        if(target<0){
            return 0;
        }
        
        if(dp[target]!=-1){
            return dp[target];
        }
        int ans=0;
        for(int i=0; i < nums.size() ; i++){
            ans+=helperMem(nums,target-nums[i],dp);
        }
        dp[target]=ans;
        return dp[target];
    }

    int helperTab(vector<int>& nums, int target){
        vector<int>dp(target+1,-1);
        dp[0]=1;

        for(int t=1 ; t <=target ; t++){
            long long ans=0;
            for(int i=0; i < nums.size() ; i++){
                if(t-nums[i]>=0)
                    ans+=dp[t-nums[i]];
            }
            dp[t]=ans;
        }

        return dp[target];
    }
    
    int combinationSum4(vector<int>& nums, int target) {
        
        // return helper(nums,target);
        
        // vector<int>dp(target+1,-1);
        // return helperMem(nums,target,dp);

        return helperTab(nums,target);

    }
};