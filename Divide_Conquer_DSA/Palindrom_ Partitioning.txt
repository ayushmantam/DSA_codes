class Solution {
public:
    bool isPalindrome(string str){
        int s=0;
        int e=str.length()-1;
        while(s<=e){
            if(str[s]==str[e]){
                s++;
                e--;
            }

            else{
                return false;
            }
        }
        return true;
    }
    void solve(string s,vector<vector<string>>&ans,vector<string>&current,int i){

        if(i==s.length()){
            ans.push_back(current);
            
            return;
        }

        for (int j = i; j < s.length(); j++) {
            if (isPalindrome(s.substr(i, j - i + 1))) {
                current.push_back(s.substr(i, j - i + 1));
                solve(s, ans, current, j + 1);  // Update the recursive call
                current.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        int i=0;
        vector<vector<string>>ans;
        vector<string>current;
        solve(s,ans,current,i);

        return ans;
    }
};