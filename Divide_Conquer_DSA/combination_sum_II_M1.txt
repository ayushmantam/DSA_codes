class Solution {
public:
    void combinationSum2Helper(vector<int>& candidates, int target,vector<vector<int>>&ans,vector<int>&v,int index){
        if(target==0){
            ans.push_back(v);
            return;
        }

        if(target<0){
            return;
        }
        unordered_map<int,bool>visited;
        for(int i=index;i<candidates.size();i++){
            if(visited.find(candidates[i])!=visited.end()){
                continue;
            }
            v.push_back(candidates[i]);
            visited[candidates[i]]=true;
            combinationSum2Helper(candidates,target-candidates[i],ans,v,i+1);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());

        vector<vector<int>>ans;
        vector<int>v;
        combinationSum2Helper(candidates,target,ans,v,0);

        
        return ans;
    }
};